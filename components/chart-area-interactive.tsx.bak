"use client"

import * as React from "react"
import { Area, AreaChart, CartesianGrid, XAxis, YAxis, Legend } from "recharts"
import { LineChart } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { useEmojiData } from "@/lib/hooks/use-emoji-data"
import { useState } from "react"
import type { Emoji, UserWithEmojiCount } from "@/lib/services/emoji-service"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { EmojiDetailsModal } from "@/components/emoji-details-modal"
import EmojiOverlay from "@/components/emoji-overlay"
import UserOverlay from "@/components/user-overlay"
import { type ChartConfig, ChartContainer, ChartTooltip } from "@/components/ui/chart"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Skeleton } from "@/components/ui/skeleton"
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group"
import { format as formatDate, startOfDay, endOfDay, subDays, eachDayOfInterval, parseISO } from "date-fns"

const chartConfig = {
  emojis: {
    label: "Emojis",
  },
  created: {
    label: "Created Emojis",
    color: "hsl(var(--chart-1))",
  },
  uniqueContributors: {
    label: "Unique Contributors",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig

export function ChartAreaInteractive() {
  const isMobile = useIsMobile()
  const [timeRange, setTimeRange] = React.useState("all")
  const { emojiData, loading, useDemoData, demoChartData, setDemoTimeRange } = useEmojiData()
  const [selectedDate, setSelectedDate] = useState<Date | null>(null)
  const [selectedEmojis, setSelectedEmojis] = useState<Emoji[]>([])
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isMonthView, setIsMonthView] = useState(false)
  const [selectedEmoji, setSelectedEmoji] = useState<Emoji | null>(null)
  const [selectedUser, setSelectedUser] = useState<UserWithEmojiCount | null>(null)

  React.useEffect(() => {
    // Keep the all (all-time) view for both mobile and desktop
    // No need to change the timeRange based on device
  }, [isMobile])

  // Update demo time range when timeRange changes
  React.useEffect(() => {
    if (useDemoData) {
      setDemoTimeRange(timeRange)
    }
  }, [timeRange, useDemoData, setDemoTimeRange])

  // Handle click on chart data point
  const handleDataPointClick = (data: any) => {
    if (!data || !data.activePayload || !data.activePayload.length || !emojiData) return

    const activeData = data.activePayload[0].payload
    if (!activeData || !activeData.date) return

    try {
      // Get current date for comparison
      const currentDate = now || new Date()
      
      let selectedDate: Date;
      let startTimestamp: number;
      let endTimestamp: number;
      let emojisForDate: Emoji[] = [];
      
      // Check if this is a monthly data point (YYYY-MM format) or daily (YYYY-MM-DD format)
      const isMonthlyFormat = activeData.isMonthly || (activeData.date.length === 7 && activeData.date.includes('-') && !activeData.date.split('-')[2]);
      
      if (isMonthlyFormat) {
        // Handle monthly data point (YYYY-MM format)
        const [year, month] = activeData.date.split("-").map(Number);
        
        // Create date for the first day of the month
        const monthStart = new Date(year, month - 1, 1);
        monthStart.setHours(0, 0, 0, 0);
        
        // Create date for the first day of the next month
        const monthEnd = new Date(year, month, 0);
        monthEnd.setHours(23, 59, 59, 999);
        
        // Calculate Unix timestamps (in seconds)
        startTimestamp = Math.floor(monthStart.getTime() / 1000);
        endTimestamp = Math.floor(monthEnd.getTime() / 1000);
        
        selectedDate = monthStart;
        
        // Filter emojis for the selected month
        emojisForDate = emojiData.filter(emoji => 
          emoji.created >= startTimestamp && emoji.created <= endTimestamp
        );
        
        // Sort emojis by date (newest first) for better display
        emojisForDate.sort((a, b) => b.created - a.created);
        
        console.log(`Found ${emojisForDate.length} emojis for ${monthStart.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`);
      } else {
        // Handle daily data point (YYYY-MM-DD format)
        const [year, month, day] = activeData.date.split("-").map(Number);
        
        // Create the selected date at midnight in local timezone
        selectedDate = new Date(year, month - 1, day || 1);
        selectedDate.setHours(0, 0, 0, 0);
        
        // Check if this is today
        const today = new Date(currentDate);
        today.setHours(0, 0, 0, 0);
        const isSelectedToday = selectedDate.getTime() === today.getTime();
        
        // Calculate Unix timestamps (in seconds) for start and end of the selected day
        startTimestamp = Math.floor(selectedDate.getTime() / 1000);
        
        const nextDay = new Date(selectedDate);
        nextDay.setDate(nextDay.getDate() + 1);
        endTimestamp = Math.floor(nextDay.getTime() / 1000) - 1;
        
        // Filter emojis for the selected date
        emojisForDate = emojiData.filter(emoji => {
          if (isSelectedToday) {
            console.log(`Emoji ${emoji.name} timestamp: ${emoji.created} (${new Date(emoji.created * 1000).toISOString()})`);
          }
          return emoji.created >= startTimestamp && emoji.created <= endTimestamp;
        });
        
        console.log(`Found ${emojisForDate.length} emojis for ${selectedDate.toDateString()}`);
      }
      
      // Set state and pass isMonthView flag to modal
      setSelectedDate(selectedDate);
      setSelectedEmojis(emojisForDate);
      setIsMonthView(isMonthlyFormat);
      setIsModalOpen(true)
    } catch (error) {
      console.error("Error processing date selection:", error)
    }
  }

  // Generate chart data from emoji data
  // Memoize 'now' and 'startDate' on the client to avoid SSR/CSR mismatch
  // Default timeRange is now '90d' (Last 3 months)
  const [now, setNow] = React.useState<Date | null>(null)
  const [isClient, setIsClient] = React.useState(false)

  React.useEffect(() => {
    setIsClient(true)
    // Force the date to be the current date (May 19, 2025)
    const currentDate = new Date()

    // Ensure we're using the latest time
    currentDate.setHours(new Date().getHours())
    currentDate.setMinutes(new Date().getMinutes())

    console.log("Current date initialized:", {
      local: currentDate.toString(),
      iso: currentDate.toISOString(),
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      year: currentDate.getFullYear(),
      month: currentDate.getMonth() + 1,
      day: currentDate.getDate(),
    })
    setNow(currentDate)
  }, [])

  const chartData = React.useMemo(() => {
    // If using demo data, return the pre-generated chart data
    if (useDemoData) {
      return demoChartData
    }

    if (!emojiData.length || !now) return []
    // Start and end of today in local time
    const todayStart = startOfDay(now)
    // Use actual current time to include today in the chart
    const todayEnd = now
    // Determine start date based on time range (inclusive)
    let startDate;
    
    if (timeRange === "all") {
      // For 'All Time', find the oldest emoji's date
      if (emojiData.length > 0) {
        const oldestEmoji = [...emojiData].sort((a, b) => a.created - b.created)[0];
        startDate = startOfDay(new Date(oldestEmoji.created * 1000));
        
        // If the data spans more than a year, use monthly aggregation instead of daily
        const daysDiff = Math.floor((todayEnd.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        if (daysDiff > 365) {
          // Generate monthly data instead
          const months = [];
          let currentDate = new Date(startDate);
          
          while (currentDate <= todayEnd) {
            months.push(new Date(currentDate));
            // Move to the first day of the next month
            currentDate.setMonth(currentDate.getMonth() + 1);
            currentDate.setDate(1);
          }
          
          return months.map(monthDate => {
            const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
            const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);
            
            const monthStartSec = Math.floor(monthStart.getTime() / 1000);
            const monthEndSec = Math.floor(monthEnd.getTime() / 1000);
            
            const monthlyEmojis = emojiData.filter(e => e.created >= monthStartSec && e.created <= monthEndSec);
            const createdCount = monthlyEmojis.length;
            const uniqueContributors = new Set(monthlyEmojis.map(e => e.user_id)).size;
            
            return {
              date: formatDate(monthDate, "yyyy-MM"),
              created: createdCount,
              uniqueContributors,
              isMonthly: true
            };
          });
        }
      } else {
        // If no data, default to 1 year
        startDate = subDays(todayStart, 364);
      }
    } else if (timeRange === "90d") {
      startDate = subDays(todayStart, 89);
    } else if (timeRange === "30d") {
      startDate = subDays(todayStart, 29);
    } else {
      startDate = subDays(todayStart, 6);
    }
    // Generate each day in interval
    const dates = eachDayOfInterval({ start: startDate, end: todayEnd })
    // Build chart data
    return dates.map((date) => {
      const dayStartSec = Math.floor(startOfDay(date).getTime() / 1000)
      const dayEndSec = Math.floor(endOfDay(date).getTime() / 1000)
      const dailyEmojis = emojiData.filter((e) => e.created >= dayStartSec && e.created <= dayEndSec)
      const createdCount = dailyEmojis.length
      const uniqueContributors = new Set(dailyEmojis.map((e) => e.user_id)).size
      return {
        date: formatDate(date, "yyyy-MM-dd"),
        created: createdCount,
        uniqueContributors,
      }
    })
  }, [emojiData, now, timeRange, useDemoData, demoChartData])

  // Use a consistent approach for server vs client rendering
  // Instead of returning null during SSR, render a skeleton that matches client structure
  if (!isClient || !now) {
    return (
      <Card className="@container/card">
        <CardHeader className="relative">
          <CardTitle className="flex items-center gap-2">
            <LineChart className="h-5 w-5" />
            <span>Creation Trends</span>
          </CardTitle>
          <CardDescription>
            <span className="@[540px]/card:block hidden">
              Click to view emojis from a specific day.
            </span>
            <span className="@[540px]/card:hidden">Emoji creation trends</span>
          </CardDescription>
        </CardHeader>
        <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
          <div className="h-[280px] w-full">
            <ChartContainer config={chartConfig} className="aspect-auto h-full w-full">
              <AreaChart data={chartData} onClick={handleDataPointClick} style={{ cursor: "pointer" }}>
                <CartesianGrid vertical={false} horizontal={true} strokeDasharray="3 3" />
                <XAxis
                  dataKey="date"
                  tickLine={false}
                  axisLine={false}
                  tickMargin={16}
                  tick={{ fontSize: isMobile ? 10 : 12, fontWeight: 'bold' }}
                  interval={timeRange === 'all' ? (isMobile ? 'preserveStartEnd' : 2) : 0}
                  angle={isMobile ? -45 : 0}
                  height={timeRange === 'all' ? (isMobile ? 70 : 50) : (isMobile ? 70 : 40)}
                  fontSize={12}
                  tickFormatter={(value) => {
                    // Handle monthly format for all (all-time) view
                    if (typeof value === 'string' && value.length === 7 && value.includes('-') && timeRange === 'all') {
                      const [year, month] = value.split('-');
                      const date = new Date(parseInt(year), parseInt(month) - 1, 1);
                      
                      // For all view on mobile, be more readable but still concise
                      if (isMobile) {
                        // Only show year for January or first shown month of each year
                        if (date.getMonth() === 0) {
                          return `'${date.getFullYear().toString().slice(2)}`; // Show '23 with apostrophe
                        } else if (date.getMonth() % 4 === 0) {
                          // Show fewer months (Jan, May, Sep)
                          return date.toLocaleDateString("en-US", { month: "short" });
                        } else {
                          // Skip other months on mobile
                          return '';
                        }
                      } else {
                        // Desktop view - show full year in January, short month name for selected months
                        if (date.getMonth() === 0) {
                          return date.getFullYear().toString();
                        } else if (date.getMonth() % 2 === 0) {
                          // Show every other month (Jan, Mar, May, Jul, Sep, Nov)
                          return date.toLocaleDateString("en-US", { month: "short" });
                        } else {
                          // Skip odd months for better readability
                          return '';
                        }
                      }
                    } else if (typeof value === 'string' && value.length === 7 && value.includes('-')) {
                      // For other time ranges, show all month labels normally
                      const [year, month] = value.split('-');
                      const date = new Date(parseInt(year), parseInt(month) - 1, 1);
                      
                      if (date.getMonth() === 0) {
                        return date.getFullYear().toString();
                      } else {
                        return date.toLocaleDateString("en-US", { month: "short" });
                      }
    return (
      <Card className="@container/card">
        <CardHeader className="relative">
          <Skeleton className="h-6 w-48" />
          <Skeleton className="h-4 w-64" />
          <div className="absolute right-4 top-4">
            <Skeleton className="h-8 w-40" />
          </div>
        </CardHeader>
        <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
          <Skeleton className="h-[250px] w-full" />
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="@container/card">
      <CardHeader className="relative">
        <CardTitle className="flex items-center gap-2">
          <LineChart className="h-5 w-5" />
          <span>Creation Trends</span>
        </CardTitle>
        <CardDescription>
          <span className="@[540px]/card:block hidden">
            Click to view emojis from a specific day.
          </span>
          <span className="@[540px]/card:hidden">Emoji creation trends</span>
        </CardDescription>
        <div className="absolute right-4 top-4">
          <ToggleGroup
            type="single"
            value={timeRange}
            onValueChange={(value) => value && setTimeRange(value)}
            variant="outline"
            className="@[767px]/card:flex hidden"
          >
            <ToggleGroupItem value="all" className="h-8 px-2.5">
              All Time
            </ToggleGroupItem>
            <ToggleGroupItem value="90d" className="h-8 px-2.5">
              Last 3 months
            </ToggleGroupItem>
            <ToggleGroupItem value="30d" className="h-8 px-2.5">
              Last 30 days
            </ToggleGroupItem>
            <ToggleGroupItem value="7d" className="h-8 px-2.5">
              Last 7 days
            </ToggleGroupItem>
          </ToggleGroup>
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger 
              className="@[767px]/card:hidden flex w-[110px] sm:w-[130px] md:w-40 h-7 sm:h-8 text-xs sm:text-sm" 
              aria-label="Select a value"
            >
              <SelectValue placeholder="Last 3 months" />
            </SelectTrigger>
            <SelectContent className="rounded-xl">
              <SelectItem value="all" className="rounded-lg text-xs sm:text-sm">
                All Time
              </SelectItem>
              <SelectItem value="90d" className="rounded-lg text-xs sm:text-sm">
                Last 3 months
              </SelectItem>
              <SelectItem value="30d" className="rounded-lg text-xs sm:text-sm">
                Last 30 days
              </SelectItem>
              <SelectItem value="7d" className="rounded-lg text-xs sm:text-sm">
                Last 7 days
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        <ChartContainer config={chartConfig} className="aspect-auto h-[250px] w-full">
          <AreaChart data={chartData} onClick={handleDataPointClick} style={{ cursor: "pointer" }}>
            <CartesianGrid vertical={false} horizontal={true} strokeDasharray="3 3" />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={16}
              tick={{ fontSize: isMobile ? 10 : 12, fontWeight: 'bold' }}
              interval={timeRange === 'all' ? (isMobile ? 'preserveStartEnd' : 2) : 0}
              angle={isMobile ? -45 : 0}
              height={timeRange === 'all' ? (isMobile ? 70 : 50) : (isMobile ? 70 : 40)}
              fontSize={12}
              tickFormatter={(value) => {
                // Handle monthly format for all (all-time) view
                if (typeof value === 'string' && value.length === 7 && value.includes('-') && timeRange === 'all') {
                  const [year, month] = value.split('-');
                  const date = new Date(parseInt(year), parseInt(month) - 1, 1);
                  
                  // For all view on mobile, be more readable but still concise
                  if (isMobile) {
                    // Only show year for January or first shown month of each year
                    if (date.getMonth() === 0) {
                      return `'${date.getFullYear().toString().slice(2)}`; // Show '23 with apostrophe
                    } else if (date.getMonth() % 4 === 0) {
                      // Show fewer months (Jan, May, Sep)
                      return date.toLocaleDateString("en-US", { month: "short" });
                    } else {
                      // Skip other months on mobile
                      return '';
                    }
                  } else {
                    // Desktop view - show full year in January, short month name for selected months
                    if (date.getMonth() === 0) {
                      return date.getFullYear().toString();
                    } else if (date.getMonth() % 2 === 0) {
                      // Show every other month (Jan, Mar, May, Jul, Sep, Nov)
                      return date.toLocaleDateString("en-US", { month: "short" });
                    } else {
                      // Skip odd months for better readability
                      return '';
                    }
                  }
                } else if (typeof value === 'string' && value.length === 7 && value.includes('-')) {
                  // For other time ranges, show all month labels normally
                  const [year, month] = value.split('-');
                  const date = new Date(parseInt(year), parseInt(month) - 1, 1);
                  
                  if (date.getMonth() === 0) {
                    return date.getFullYear().toString();
                  } else {
                    return date.toLocaleDateString("en-US", { month: "short" });
                  }
                }
                
                const date = new Date(value);
                if (timeRange === "7d") {
                  // For 7-day view, show more readable weekday format
                  return isMobile ? 
                    date.toLocaleDateString("en-US", { weekday: "narrow" }) : 
                    date.toLocaleDateString("en-US", { weekday: "short" });
                } else if (timeRange === "30d") {
                  // For 30-day view, show day number with month for 1st, 5th, 10th, 15th, etc.
                  const day = date.getDate();
                  if (day === 1 || day % 5 === 0) {
                    return isMobile ? 
                      `${day}` : 
                      `${day} ${date.toLocaleDateString("en-US", { month: "short" })}`;
                  }
                  return '';
                } else {
                  // For 90d view
                  if (isMobile) {
                    // On mobile, show month name for 1st of month, every 15 days otherwise
                    if (date.getDate() === 1) {
                      return date.toLocaleDateString("en-US", { month: "short" });
                    } else if (date.getDate() === 15) {
                      return '15';
                    }
                    return '';
                  } else {
                    // On desktop, show day number or short month name
                    return date.getDate() === 1 ? 
                      date.toLocaleDateString("en-US", { month: "short" }) : 
                      (date.getDate() % 10 === 0 ? date.getDate().toString() : '');
                  }
                }
              }}
            />
            <YAxis
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              width={40}
              domain={[0, "auto"]}
              tick={{ fill: "#8884d8", fontSize: 12 }}
            />
            <ChartTooltip
              content={({ active, payload, label }) => {
                if (!active || !payload || !payload.length) return null
                
                // Check if this is a monthly data point from all view
                const isMonthlyFormat = label && typeof label === 'string' && label.length === 7 && label.includes('-') && timeRange === 'all';
                
                return (
                  <div className="rounded-lg bg-background p-3 text-xs shadow-lg ring-1 ring-border">
                    <div className="mb-1 font-medium">
                      {isMonthlyFormat ? 
                        // Format for monthly data (YYYY-MM)
                        (() => {
                          const [year, month] = (label as string).split('-');
                          const date = new Date(parseInt(year), parseInt(month) - 1, 1);
                          return date.toLocaleDateString("en-US", {
                            month: "long",
                            year: "numeric"
                          });
                        })() : 
                        // Format for daily data
                        parseISO(label as string).toLocaleDateString("en-US", {
                          month: "short",
                          day: "numeric",
                          year: timeRange === "all" ? "numeric" : undefined
                        })
                      }
                    </div>
                    <div className="flex flex-col gap-1">
                      {payload.map((entry, idx) => (
                        <div key={entry.dataKey} className="flex items-center gap-2">
                          <span
                            style={{
                              display: "inline-block",
                              width: 10,
                              height: 10,
                              background: entry.color,
                              borderRadius: "50%",
                            }}
                          ></span>
                          <span>
                            {entry.name}: <b>{entry.value}</b>
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )
              }}
            />
            <defs>
              <linearGradient id="createdGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="var(--color-created)" stopOpacity={0.8} />
                <stop offset="100%" stopColor="var(--color-created)" stopOpacity={0.1} />
              </linearGradient>
              <linearGradient id="contributorsGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#FF00B8" stopOpacity={0.8} />
                <stop offset="100%" stopColor="#FF00B8" stopOpacity={0.1} />
              </linearGradient>
            </defs>
            <Area
              type="monotone"
              dataKey="created"
              name="Created Emojis"
              stroke="var(--color-created)"
              strokeWidth={2}
              fillOpacity={0.3}
              fill="url(#createdGradient)"
              activeDot={{ r: 6, fill: "var(--color-created)", stroke: "#fff", strokeWidth: 2 }}
              connectNulls={true}
              isAnimationActive={false}
            />
            <Area
              type="monotone"
              dataKey="uniqueContributors"
              name="Unique Contributors"
              stroke="#FF00B8"
              strokeWidth={2}
              fillOpacity={0.3}
              fill="url(#contributorsGradient)"
              activeDot={{ r: 6, fill: "#FF00B8", stroke: "#fff", strokeWidth: 2 }}
              connectNulls={true}
              isAnimationActive={false}
            />
            <Legend verticalAlign="top" height={36} iconType="plainline" wrapperStyle={{ color: "#fff" }} />
          </AreaChart>
        </ChartContainer>
      </CardContent>

      <EmojiDetailsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        emojis={selectedEmojis}
        date={selectedDate || new Date()}
        isMonthView={isMonthView}
        onEmojiClick={(emoji) => {
          // Close the modal and open the emoji overlay
          setIsModalOpen(false);
          setSelectedEmoji(emoji);
        }}
        onUserClick={(user) => {
          // Close the modal and open the user overlay
          setIsModalOpen(false);
          setSelectedUser(user);
        }}
      />
      
      {/* Emoji Overlay */}
      {selectedEmoji && (
        <EmojiOverlay
          emoji={selectedEmoji}
          onClose={() => setSelectedEmoji(null)}
          onEmojiClick={(emoji) => {
            // Switch to the clicked emoji
            setSelectedEmoji(emoji);
          }}
          onUserClick={(userId, userName) => {
            // Close emoji overlay and open user overlay
            setSelectedEmoji(null);

            // Find user data from emoji data if available
            const userEmojis = emojiData.filter((e) => e.user_id === userId);

            if (userEmojis.length > 0) {
              // Calculate basic stats for this user
              const emojiCount = userEmojis.filter((e) => !e.is_alias).length;
              const timestamps = userEmojis.map((e) => e.created);
              const mostRecentTimestamp = Math.max(...timestamps);
              const oldestTimestamp = Math.min(...timestamps);

              // Calculate user's rank in the data
              const sortedUsers = emojiData
                .reduce((acc, emoji) => {
                  const existingUser = acc.find(u => u.id === emoji.user_id);
                  if (existingUser) {
                    existingUser.count++;
                  } else {
                    acc.push({ id: emoji.user_id, count: 1 });
                  }
                  return acc;
                }, [] as { id: string, count: number }[])
                .sort((a, b) => b.count - a.count);
              
              const userRank = sortedUsers.findIndex(u => u.id === userId) + 1;
              
              // Create user object with the information we have
              setSelectedUser({
                user_id: userId,
                user_display_name: userName,
                emoji_count: emojiCount,
                most_recent_emoji_timestamp: mostRecentTimestamp,
                oldest_emoji_timestamp: oldestTimestamp,
                l4wepw: 0, // Placeholder, will be calculated in UserOverlay
                l4wepwChange: 0, // Placeholder, will be calculated in UserOverlay,
                rank: userRank > 0 ? userRank : undefined
              });
            } else {
              // Try to find user rank even if we don't have emoji data
              const sortedUsers = emojiData
                .reduce((acc, emoji) => {
                  const existingUser = acc.find(u => u.id === emoji.user_id);
                  if (existingUser) {
                    existingUser.count++;
                  } else {
                    acc.push({ id: emoji.user_id, count: 1 });
                  }
                  return acc;
                }, [] as { id: string, count: number }[])
                .sort((a, b) => b.count - a.count);
              
              const userRank = sortedUsers.findIndex(u => u.id === userId) + 1;
              
              // Create minimal user object with required fields
              setSelectedUser({
                user_id: userId,
                user_display_name: userName,
                emoji_count: 0,
                most_recent_emoji_timestamp: 0,
                oldest_emoji_timestamp: 0,
                l4wepw: 0,
                l4wepwChange: 0,
                rank: userRank > 0 ? userRank : undefined
              });
            }
          }}
        />
      )}

      {/* User Overlay */}
      {selectedUser && (
        <UserOverlay
          user={selectedUser}
          onClose={() => setSelectedUser(null)}
          onEmojiClick={(emoji) => {
            // Close user overlay and open emoji overlay
            setSelectedUser(null);
            setSelectedEmoji(emoji);
          }}
        />
      )}
    </Card>
  )
}
